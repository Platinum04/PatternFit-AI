import { GoogleGenAI, Modality } from "@google/genai";
import { Style, Fabric, Measurements } from '../types';
import { SYSTEM_INSTRUCTION } from '../constants';

const API_KEY = process.env.API_KEY;
if (!API_KEY) {
  throw new Error("API_KEY environment variable not set. Please configure it before running the application.");
}
const ai = new GoogleGenAI({ apiKey: API_KEY });

const fileToGenerativePart = (base64: string, mimeType: string) => {
  return {
    inlineData: {
      data: base64,
      mimeType,
    },
  };
};

export const generateVTOImage = async (
  userImageBase64: string,
  userImageMimeType: string,
  style: Style,
  fabric: Fabric,
  measurements: Measurements
): Promise<string> => {
  const userImagePart = fileToGenerativePart(userImageBase64, userImageMimeType);
  
  const parts: any[] = [userImagePart];
  let textPrompt = '';

  if (fabric.base64 && fabric.mimeType) {
    // Custom fabric uploaded
    const fabricImagePart = fileToGenerativePart(fabric.base64, fabric.mimeType);
    parts.push(fabricImagePart);
    textPrompt = `Virtual try-on: Using the garment fabric from the second image, place a photorealistic, wrinkle-free, tailored ${style.name} on the person in the first image. The garment must accurately fit the body based on these estimated measurements: Chest ${measurements.chest} inches, Waist ${measurements.waist} inches, Hip ${measurements.hip} inches. Ensure the fabric drapes naturally over the body shape and conforms to the pose. Make the lighting consistent with the original photo.`;
  } else {
    // Pre-defined fabric selected
    textPrompt = `Virtual try-on: Place a photorealistic, wrinkle-free, tailored ${style.name} made from ${fabric.name} fabric on the person in the input photo. The garment must accurately fit the body based on these estimated measurements: Chest ${measurements.chest} inches, Waist ${measurements.waist} inches, Hip ${measurements.hip} inches. Ensure the fabric drapes naturally over the body shape and conforms to the pose. Make the lighting consistent with the original photo.`;
  }

  parts.push({ text: textPrompt });

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash-image',
    contents: {
      parts: parts,
    },
    config: {
      responseModalities: [Modality.IMAGE],
      systemInstruction: SYSTEM_INSTRUCTION,
    },
  });

  const contentParts = response?.candidates?.[0]?.content?.parts;
  if (contentParts) {
    for (const part of contentParts) {
      if (part.inlineData) {
        return part.inlineData.data;
      }
    }
  }


  throw new Error("No image generated by the API. This could be due to a safety block or an issue with the prompt.");
};

export const generateTailorFeedback = async (
  style: Style,
  fabric: Fabric,
  measurements: Measurements
): Promise<string> => {
  const textPrompt = `The client is trying on a ${fabric.name} ${style.name}. Their body measurements in inches are: Chest: ${measurements.chest}, Waist: ${measurements.waist}, Hip: ${measurements.hip}. What is your tailor's assessment of the fit?`;

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: textPrompt,
    config: {
      systemInstruction: SYSTEM_INSTRUCTION,
    }
  });

  return response.text;
};