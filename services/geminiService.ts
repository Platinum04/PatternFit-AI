import { GoogleGenAI, Modality } from "@google/genai";
import { Style, Fabric, Measurements, Gender } from '../types';
import { SYSTEM_INSTRUCTION } from '../constants';

const API_KEY = process.env.API_KEY;
if (!API_KEY) {
  throw new Error("API_KEY environment variable not set. Please configure it before running the application.");
}
const ai = new GoogleGenAI({ apiKey: API_KEY });

const fileToGenerativePart = (base64: string, mimeType: string) => {
  return {
    inlineData: {
      data: base64,
      mimeType,
    },
  };
};

const formatMeasurementsForPrompt = (measurements: Measurements, gender: Gender) => {
    const bustOrChest = gender === 'female' ? 'Bust' : 'Chest';
    
    // Helper to convert camelCase to Title Case for the prompt
    const toTitleCase = (str: string) => str
      .replace(/([A-Z])/g, ' $1')
      .replace(/^./, (s) => s.toUpperCase());

    return Object.entries(measurements)
        .filter(([, value]) => value !== undefined && value !== null)
        .map(([key, value]) => {
            let label = toTitleCase(key);
            if (key === 'bust') {
                label = bustOrChest;
            }
            return `${label}: ${value}"`;
        })
        .join(', ');
}


export const generateVTOImage = async (
  userImageBase64: string,
  userImageMimeType: string,
  style: Style,
  fabric: Fabric,
  measurements: Measurements,
  gender: Gender
): Promise<string> => {
  const userImagePart = fileToGenerativePart(userImageBase64, userImageMimeType);
  
  const parts: any[] = [userImagePart];
  let textPrompt = '';
  const measurementString = formatMeasurementsForPrompt(measurements, gender);

  const basePrompt = `Virtual try-on: Place a photorealistic, wrinkle-free, tailored ${style.name} on the person in the first image. The garment must accurately fit the body based on these estimated measurements (in inches): ${measurementString}. Ensure the fabric drapes naturally over the body shape and conforms to the pose. Make the lighting consistent with the original photo.`;

  if (fabric.base64 && fabric.mimeType) {
    const fabricImagePart = fileToGenerativePart(fabric.base64, fabric.mimeType);
    parts.push(fabricImagePart);
    textPrompt = `Using the garment fabric from the second image, which the user has named '${fabric.name}', ${basePrompt}`;
  } else {
    throw new Error("Fabric data is incomplete. Custom fabric image data is required.");
  }

  parts.push({ text: textPrompt });

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash-image',
    contents: {
      parts: parts,
    },
    config: {
      responseModalities: [Modality.IMAGE],
      systemInstruction: SYSTEM_INSTRUCTION,
    },
  });

  const candidate = response?.candidates?.[0];
  
  // Check for safety blocks or other non-successful completions first
  if (!candidate || (candidate.finishReason && candidate.finishReason !== 'STOP')) {
     let reason = "an unknown issue";
     if (candidate?.finishReason) {
         reason = `the following reason: ${candidate.finishReason}. This is often due to a safety block on the input image`;
     }
     console.error("Gemini API response blocked or incomplete.", response);
     throw new Error(`Image generation failed due to ${reason}. Please try using a different photo.`);
  }

  const contentParts = candidate?.content?.parts;
  if (contentParts) {
    for (const part of contentParts) {
      if (part.inlineData) {
        return part.inlineData.data;
      }
    }
  }

  // Fallback error if no image is found even in a seemingly successful response
  console.error("Gemini API response did not contain an image.", response);
  throw new Error("No image was generated by the API. The response did not contain image data.");
};

export const generateTailorFeedback = async (
  style: Style,
  fabric: Fabric,
  measurements: Measurements,
  gender: Gender
): Promise<string> => {
  const measurementString = formatMeasurementsForPrompt(measurements, gender);
  const textPrompt = `The client is trying on a ${style.name} made from a fabric they called "${fabric.name}". Their body measurements in inches are: ${measurementString}. What is your tailor's assessment of the fit?`;

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: textPrompt,
    config: {
      systemInstruction: SYSTEM_INSTRUCTION,
    }
  });

  return response.text;
};
